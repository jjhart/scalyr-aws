#!/usr/bin/env python
# AWS utility for Scalyr
# Copyright 2014 Scalyr Inc.

import argparse
import base64
import boto3
import datetime
from decimal import Decimal
from email.mime.text import MIMEText
import json
import os
import pytz
import smtplib
import subprocess
import sys
import time

REGION_NAME='us-east-1'
SCALYR_BENCHMARK_EMAIL='s3-benchmark@scalyr.com'

def load_instance_types( filename="instance.types" ):
    lines = []
    try:
        with open( filename, 'r' ) as f:
            lines = f.read().splitlines()
    except:
        print "Error reading instance types from '%s'.  Using defaults." % filename
    if not lines:
        lines = [
            'c4.8xlarge',
            'c3.8xlarge',
            'c3.4xlarge',
            'm1.xlarge',
            'c4.xlarge'
        ]
    lines.append( 't2.micro' )
    return lines

def get_availability_zones( ec2 ):
    response = ec2.describe_availability_zones( Filters=[ { 'Name': 'state', 'Values' : ['available'] } ] )
    return response

def update_spot_price_history( history, types ):

    epoch = datetime.datetime( 1970, 1, 1, 0, 0, 0, 0, pytz.utc )

    for spot_price in history:
        instance_type = spot_price['InstanceType']
        type_data = {
            }
        if instance_type not in types:
            types[ instance_type ] = type_data
        else:
            type_data = types[ instance_type ]

        zone_data = {
            'current': Decimal( 0.0 ),
            'mostRecent': epoch,
            'mean': Decimal( 0.0 ),
            'max': Decimal( 0.0 ),
            'min': Decimal( 100000.0 ),
            'values' : []
            }
        zone = spot_price['AvailabilityZone']

        if zone not in type_data:
            type_data[ zone ] = zone_data
        else:
            zone_data = type_data[ zone ]

        price = Decimal( spot_price['SpotPrice'] )
        if zone_data['values']:
            count = len( zone_data['values'] )
            zone_data['mean'] = (price + (zone_data['mean']*count)) / (count + 1)
        else:
            zone_data['mean'] = price

        zone_data['max'] = max( price, zone_data['max'] )
        zone_data['min'] = min( price, zone_data['min'] )

        zone_data['values'].append( price )

        if spot_price['Timestamp'] >= zone_data['mostRecent']:
            zone_data['current'] = price
            zone_data['mostRecent'] = spot_price['Timestamp']

def commandSpotPrice( parser ):
    instance_types = load_instance_types()

    choices = instance_types[:].append( 'all' )
    parser.add_argument( '--type', required=True, help="The instance type to query spot pricing for.",
                         choices=choices )
    parser.add_argument( '--days', default=30, type=int, help="The number of previous days to check" )
    args = parser.parse_args()

    if args.type != 'all':
        instance_types = [ args.type ]

    ec2 = boto3.client( 'ec2', region_name=REGION_NAME )

    end_time = (datetime.datetime.today()).replace( tzinfo=pytz.utc )
    start_time = end_time  + datetime.timedelta(-args.days)
    types = {}
    current_date = (end_time + datetime.timedelta( 1 )).date()
    print ("Processing, %s - %s" % ( start_time.date(), end_time.date()) )
    paginator = ec2.get_paginator('describe_spot_price_history')
    try:
        for page in paginator.paginate( StartTime=start_time, EndTime=end_time,
                                        InstanceTypes=instance_types,
                                        ProductDescriptions=[ 'Linux/UNIX' ] ):

            update_spot_price_history( page['SpotPriceHistory'], types )
            print ".",
            sys.stdout.flush()

        print ""
    except KeyboardInterrupt:
        print ""

    print "%s\t%s\t%s\t%s\t%s\t%s" % ('instance', 'avail. zone', 'current', 'mean', 'max', 'min')
    for instance_type, instances in types.iteritems():
        for region, values in instances.iteritems():
            print "%s\t%s\t%.4f\t%.4f\t%.4f\t%.4f" % (instance_type, region, values['current'], values['mean'], values['max'], values['min'])

def replaceAll( text, items ):
    for key, value in items.iteritems():
        text = text.replace( key, value )
    return text

def prepareAgentConfig( api_key, instance_type, count, region, zone ):
    content = ""
    with open( 'agent.json.template', 'r' ) as f:
        content = f.read()

    items = {
        '%apiKey%' : api_key,
        '%instanceType%' : instance_type,
        '%region%' : region,
        '%zone%' : zone,
    };

    return replaceAll( content, items )

def prepareProvisionScript( agent_config, group, sizes_and_threads, encode=True ):
    script = ""
    with open( 'provision.sh', 'r' ) as f:
        script = f.read()

    result = replaceAll( script, {
                                    '%agent.json%' : agent_config,
                                    '%groupId%' : group,
                                    '%sizes_and_threads%' : sizes_and_threads
                               })

    if encode:
        result = base64.b64encode( result )

    return result

def getGroupName( instance_type ):
    return "%s-%d" % (instance_type, int( time.time() ) )

def commandLaunch( parser ):
    instance_types = load_instance_types()
    parser.add_argument( '--type', required=True, help="The instance type to launch.",
                         choices=instance_types )
    parser.add_argument( '--price', required=True, type=float,help="The spot price to use for this group" )
    parser.add_argument( '--count', required=True, type=int,help="The number of instances to launch" )
    parser.add_argument( '--hours', default=0,type=int,help="the number of hours to run the group for" )
    parser.add_argument( '--zone', required=True, help="The availability zone to launch in" )
    parser.add_argument( '--image', default='ami-08111162', help="The image to use for this instance" )
    parser.add_argument( '--aws_key_pair', default='scalyr-aws', help="The keypair name to use for this instance" )
    parser.add_argument( '--security_group', default='sg-10012377', help="The security group" )
    parser.add_argument( '--scalyr_api_key', required=True,help="The Scalyr API key to use" )
    parser.add_argument( '--sizes_and_threads', default='', help="Comma-delimited list of objects sizes and thread counts for read operations" )

    args = parser.parse_args()

    ec2 = boto3.client( 'ec2', region_name=REGION_NAME )

    group = getGroupName( args.type )

    end_time = (datetime.datetime.today()).replace( tzinfo=pytz.utc )
    start_time = end_time - datetime.timedelta( 0, 0, 1 )
    history = ec2.describe_spot_price_history( StartTime=start_time, EndTime=end_time, InstanceTypes=[args.type],
                                               AvailabilityZone=args.zone, ProductDescriptions=[ 'Linux/UNIX' ] )

    current_price = Decimal( 0 )
    for price in history['SpotPriceHistory']:
        current_price = Decimal( price['SpotPrice'] )

    agent_config = prepareAgentConfig( args.scalyr_api_key, args.type, args.count, REGION_NAME, args.zone )
    provision_script = prepareProvisionScript( agent_config, group, args.sizes_and_threads )

    instances = ec2.request_spot_instances(
                                      SpotPrice=str(args.price),
                                      InstanceCount=args.count,
                                      Type='persistent',
                                      LaunchSpecification={
                                        'ImageId' : args.image,
                                        'KeyName' : args.aws_key_pair,
                                        'UserData': provision_script,
                                        'InstanceType' : args.type,
                                        'Placement' : {
                                          'AvailabilityZone' : args.zone,
                                        },
																				# extra ephemeral mappings are ignored, so we go maximal below to support up to i2.8xlarge
																				'BlockDeviceMappings' : [
																					 { 'DeviceName': '/dev/xvda', 'Ebs' : { 'DeleteOnTermination' : True, 'VolumeSize' : 8 } },
																					 { 'DeviceName': '/dev/xvdb' , 'VirtualName' : 'ephemeral0' },
																					 { 'DeviceName': '/dev/xvdc' , 'VirtualName' : 'ephemeral1' },
																					 { 'DeviceName': '/dev/xvdd' , 'VirtualName' : 'ephemeral2' },
																					 { 'DeviceName': '/dev/xvde' , 'VirtualName' : 'ephemeral3' },
																					 { 'DeviceName': '/dev/xvdf' , 'VirtualName' : 'ephemeral4' },
																					 { 'DeviceName': '/dev/xvdg' , 'VirtualName' : 'ephemeral5' },
																					 { 'DeviceName': '/dev/xvdh' , 'VirtualName' : 'ephemeral6' },
																					 { 'DeviceName': '/dev/xvdi' , 'VirtualName' : 'ephemeral7' }
																				],
                                        'IamInstanceProfile': {
                                          'Name': 's3bench-provision'
                                        },
                                        'SecurityGroupIds': [args.security_group],
                                      }
                                      )
    index = 0
    requests = []
    failed = {}
    for instance in instances['SpotInstanceRequests']:
        requests.append( instance['SpotInstanceRequestId'] )
        try:
            ec2.create_tags( Resources=[ instance['SpotInstanceRequestId'] ],
                             Tags=[
                                { 'Key': 'GroupId', 'Value': group },
                                { 'Key': 'GroupIndex', 'Value': str(index) },
                             ])
        except:
            failed[index] = instance

        index += 1

    for index, instance in failed:
        try:
            ec2.create_tags( Resources=[ instance['SpotInstanceRequestId'] ],
                             Tags=[
                                { 'Key': 'GroupId', 'Value': group },
                                { 'Key': 'GroupIndex', 'Value': str(index) },
                             ])
        except:
            print "Failed to set tag for spot instance: %s" % instance['SpotInstanceRequestId']

    message = "Launched new spot instance group: %s\n\nLaunch parameters:\n\ttype: %s\n\tinstances: %d\n\tprice per instance/hour: $%.2f\n\tregion: %s\n\tzone: %s\n\taws image: %s\n\tcurrent time: %s\n\testimated current spot price %s\n\nKill with:\n\t./scalyr-aws kill-group --name %s" % (group, args.type, args.count, args.price, REGION_NAME, args.zone, args.image, str( datetime.datetime.now() ), str( current_price ), group )

    sendEmail( SCALYR_BENCHMARK_EMAIL, SCALYR_BENCHMARK_EMAIL, 's3Benchmark - Launched group %s' % group, message )

    if args.hours != 0:
        current_file = os.path.abspath( __file__ )
        #give 5 minutes extra, to allow for startup time
        minutes = (args.hours * 60) + 5
        command = 'echo "%s kill-group --name %s" | at now + %d minutes' % ( current_file, group, minutes )
        subprocess.Popen( command, shell=True )

    print "Running. Group name is: ", group

def commandListGroups( parser ):
    instance_types = load_instance_types()

    choices = instance_types[:].append( 'all' )
    parser.add_argument( '--type', default='all', help="The instance type to query for (defaults to all).",
                         choices=choices )
    args = parser.parse_args()

    if args.type != 'all':
        instance_types = [ args.type ]


    ec2 = boto3.client( 'ec2', region_name=REGION_NAME )

    response = ec2.describe_spot_instance_requests( Filters=[
        { 'Name' : 'state', 'Values': [ 'open', 'active' ] },
    ])

    groups = {}
    for request in response['SpotInstanceRequests']:
        if 'Tags' in request:
            for tag in request['Tags']:
                if tag['Key'] == 'GroupId':
                    if tag['Value'] not in groups:
                        groups[tag['Value']] = (0, request['CreateTime'])
                    count, timestamp = groups[tag['Value']]
                    groups[tag['Value']] = (count+1, timestamp)

   
    if groups:
        print "The following s3benchmarking groups are active"
        for group, (count, timestamp) in groups.iteritems():
            print group
            print "    instances: %d" % count
            print "    launched: %s" % str( timestamp )

        print

def commandKillGroup( parser ):
    parser.add_argument( '--name', required=True, help="The name of the group to kill - use list-groups to find active groups" )
    args = parser.parse_args()


    ec2 = boto3.client( 'ec2', region_name=REGION_NAME )

    response = ec2.describe_spot_instance_requests( Filters=[
        { 'Name' : 'tag:GroupId', 'Values': [args.name] }
    ])

    instances = []
    requests = []
    for request in response['SpotInstanceRequests']:
        requests.append( request['SpotInstanceRequestId'] )
        if 'InstanceId' in request and request['InstanceId']:
            instances.append( request['InstanceId'] )

    if requests:
        ec2.cancel_spot_instance_requests( SpotInstanceRequestIds=requests )

    message = "The s3benchmark group '%s' has been killed.\n\nCurrent time: %s\n\nNumber of instances running when killed: %d\n" % (args.name, str( datetime.datetime.now() ), len( instances ))

    sendEmail( SCALYR_BENCHMARK_EMAIL, SCALYR_BENCHMARK_EMAIL, 's3Benchmark - Killing group %s' % args.name, message )

    print "Waiting to shutdown..."
    if instances:
        ec2.terminate_instances( InstanceIds=instances )
        waiter = ec2.get_waiter('instance_terminated')
        waiter.wait( InstanceIds=instances )

def sendEmail( to, sender, subject, message ):
    msg = MIMEText( message )

    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = to

    s = smtplib.SMTP('localhost')
    s.sendmail(sender, [to], msg.as_string())
    s.quit()

if __name__ == '__main__':
    all_commands = {
        'launch' : commandLaunch,
        'list-groups' : commandListGroups,
        'kill-group' : commandKillGroup,
        'spot-price' : commandSpotPrice
    }

    parser = argparse.ArgumentParser(description='Scalyr command-line tool for AWS benchmarking.')
    parser.add_argument('command', choices=all_commands.keys(),
                        help='specifies the action to be performed')
    command = None
    # Because the options are command-specific, we cannot fully parse the arguments until we know the
    # command... but we also need to know which command to invoke so that we can add the command-specific
    # options and then execute the command.  So, here, we just guess what the command is by looking over all the
    # arguments and seeing the first one that matches one of the possible commands.
    for arg in sys.argv[1:]:
        if arg in all_commands:
            command = arg

    # If we could not find a possible command, then just try to parse the commandline with the current options, which
    # we know will fail since there's no valid value for 'command'.
    if command is None:
        tmp_args = parser.parse_args()

    # Invoke the command's function from the all_command's mapping.  We really should change this to a more
    # object oriented approach.
    command_func = all_commands[command]
    command_func( parser )
